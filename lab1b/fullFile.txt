------------LEXIC----------------
Alphabet:
    a. Upper case letters (A-Z) and lower case letters (a-z)
    b. Decimal digits (0-9)

Lexic:
- special symbols:
    - operators: add, diff, mul, div, gt, lt, eq, sgt, slt
    - separators: {}, [], :, ~, 
    - reserved words: variable, array of, BEGIN, END, show, read, in case, loop, in, is

- identifiers:
    IDENTIFIER = LETTER | LETTER{LETTER}
    LETTER = "A" | "B" | ... | "Z" | "a" | "b" | ... | "z"

- constants:
    - integer:
        CONSTANT = "+" NUMBER | "-" NUMBER | NUMBER
        NUMBER = DIGIT{NUMBER}
        DIGIT = "0" | "1" | ... | "9"
    - character:
        CHARACTER = "'" LETTER "'" | "'" DIGIT "'"
    - string:
        STRING = "'" CHAR {STRING} "''
        CHAR = LETTER | DIGIT
    
---------------TOKEN------------------

real
int
otherwise
in case
char
loop
lt
slt
gt
sgt
eq
add
diff
mul
div
variable 
array of
in
string
show
read
is
0 
1  

------------------SYNTAX-------------------

PROGRAM = "variable"  DECLARATION_LIST "~" | "array of" ARRAY_DECLARATION "~"
DECLARATION_LIST = DECLARATION | DECLARATION "~" DECLARATION_LIST
DECLARATION = IDENTIFIER | IDENTIFIER ASSIGNMENT | IDENTIFIER ":" TYPE
ARRAY_DECLARATION = (TYPE | "variable") IDENTIFIER
TYPE = "int" | "char" | "string" | "real" | "bool"

COMPOUND_STATEMENT = "BEGIN" STATEMENT_LIST "END"

STATEMENT_LIST = STATEMENT | STATEMENT "~" STATEMENT_LIST
STATEMENT = ASSIGN_STATEMENT | IO_STATEMENT | STRUCTURAL_STATEMENT
ASSIGN_STATEMENT = IDENTIFIER "is" EXPRESSION
EXPRESSION = EXPRESSION "add" TERM | TERM
TERM = TERM "mul" FACTOR | FACTOR
FACTOR = "(" EXPRESSION ")" | IDENTIFIER
IO_STATEMENT = "read" | "show" IDENTIFIER
STRUCTURAL_STATEMENT = CONDITIONAL_STATEMENT | REPETITIVE_STATEMENT
CONDITIONAL_STATEMENT = "in case" CONDITION ":" STATEMENT ["otherwise" STATEMENT]
REPETITIVE_STATEMENT = "loop" CONDITION ":" STATEMENT
CONDITION = EXPRESSION RELATION EXPRESSION
RELATION = "gt" | "lt" | "eq" | "sgt" | "slt" | "in"